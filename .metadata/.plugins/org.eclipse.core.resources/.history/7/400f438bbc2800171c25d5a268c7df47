package MatrixUtil;

/**
 * This class are used to store the Matrix and giving them some utility
 * to play with matrix that Ko Robyn have teach us.
 * 
 * Some utility that can be used to play with:
 *  - Transpose
 *  - Find the cofactor matrix
 *  - Find the determiner
 *  - Multiplication
 * 
 * @version v0.1.1-alpha1
 * @author 201673011 - Chris x 201673077 - Irvan
 *
 */
public class Matrix {
	/**
	 * Matrix storage system, use 2d array.
	 */
	private int[][] matrix;
	
	/**
	 * Instantiate blank matrix
	 * @param rowSize n of the Matrix.
	 * @param colSize m of the Matrix.
	 */
	public Matrix(int rowSize, int colSize){
		matrix = new int[rowSize][colSize];
	}
	
	/**
	 * Instantiate matrix from 2d array
	 * @param matrix existing 2d array of matrix.
	 */
	public Matrix(int[][] matrix) {
		this.matrix = matrix;
	}
	
	/**
	 * Convert current matrix as array of integer
	 * @return Matrix on 2D array.
	 */
	public int[][] toIntArray(){
		return matrix;
	}
	
	/**
	 * Changes the current value on a particular position
	 * @param row row position.
	 * @param col column position.
	 * @param value value that want to be changed.
	 * 
	 * @throws IndexOutOfBoundsException when the position are not in bounds.
	 */
	public void setValue(int row, int col, int value) throws IndexOutOfBoundsException{
		matrix[row][col] = value;
	}
	
	/**
	 * Get a submatrix version of the matrix.
	 * This will return new matrix instance apart from this object
	 * itself.
	 * @param n row should be avoided
	 * @param m column should be avoided
	 * @return
	 */
	private Matrix getSubmatrix(int m, int n) {
		if(matrix.length < 3 || matrix[0].length < 3)
			return null;
		
		Matrix x = new Matrix(matrix.length-1, matrix[0].length-1);
		
		for(int i=0, row=0; i<matrix.length; i++){
			if(i==m)
				continue;
			for(int j=0, col=0; j<matrix[0].length; j++){
				if(j==n)
					continue;
				x.setValue(row++, col++, matrix[i][j]);
			}
		}
		
		return x;
	}
	

	/**
	 * Get the determinant for matrix 2x2.
	 * @return determinant of the matrix.
	 * @throws InvalidMoveException
	 */
	private int getDeterminantOn2x2() throws InvalidMoveException{
		if(matrix.length != 2 || matrix[0].length != 2)
			throw new InvalidMoveException("We can't find the determinant if it's not 2x2!");
		return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
	}
	
	public int getCofactor(){
		
	}
	
	
	
	
	
	/*************** STATIC METHOD REGION ***************/
	
	/**
	 * Generate an identity matrix
	 * @param size desired size of the matrix
	 * @return identity matrix, n x n
	 */
	public static Matrix getIdentityMatrix(int size){
		Matrix m = new Matrix(size,size);
		
		for(int i=0; i<size; i++)
			m.setValue(i, i, 1);
		
		return m;
	}
}
